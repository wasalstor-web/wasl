// Service Worker for Khalid Agent
// ูููู ุฎุงูุฏ ุงูุฐูู - Service Worker

// ุชุซุจูุช ุงูุฎุฏูุฉ
chrome.runtime.onInstalled.addListener((details) => {
    console.log('๐ค ุชู ุชุซุจูุช ูููู ุฎุงูุฏ ุงูุฐูู');
    
    if (details.reason === 'install') {
        // ุฅุนุฏุงุฏ ุงูุชุฑุงุถู ุนูุฏ ุงูุชุซุจูุช ูุฃูู ูุฑุฉ
        chrome.storage.local.set({
            agentSettings: {
                language: 'ar',
                autoComplete: true,
                notifications: true,
                commandHistory: []
            }
        });
        
        // ูุชุญ ุตูุญุฉ ุชุฑุญูุจ
        chrome.tabs.create({
            url: chrome.runtime.getURL('welcome.html') || 'https://wasl.store'
        });
    }
});

// ุจุฏุก ุชุดุบูู ุงูุฎุฏูุฉ
chrome.runtime.onStartup.addListener(() => {
    console.log('๐ ุชู ุจุฏุก ุชุดุบูู ูููู ุฎุงูุฏ ุงูุฐูู');
});

// ุงุณุชูุจุงู ุงูุฑุณุงุฆู ูู content scripts ู popup
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
    handleMessage(request, sender, sendResponse);
    return true; // ูุญุงูุธ ุนูู ููุงุฉ ุงูุงุชุตุงู ููุชูุญุฉ
});

// ุงูุชุนุงูู ูุน ุงูุฑุณุงุฆู
async function handleMessage(request, sender, sendResponse) {
    try {
        switch (request.type) {
            case 'GET_SETTINGS':
                const settings = await getSettings();
                sendResponse({ success: true, data: settings });
                break;
                
            case 'SAVE_SETTINGS':
                await saveSettings(request.settings);
                sendResponse({ success: true });
                break;
                
            case 'LOG_COMMAND':
                await logCommand(request.command, request.result);
                sendResponse({ success: true });
                break;
                
            case 'GET_COMMAND_HISTORY':
                const history = await getCommandHistory();
                sendResponse({ success: true, data: history });
                break;
                
            case 'CLEAR_HISTORY':
                await clearCommandHistory();
                sendResponse({ success: true });
                break;
                
            case 'EXECUTE_GLOBAL_COMMAND':
                await executeGlobalCommand(request.command);
                sendResponse({ success: true });
                break;
                
            default:
                sendResponse({ success: false, error: 'ููุน ุฑุณุงูุฉ ุบูุฑ ูุนุฑูู' });
        }
    } catch (error) {
        console.error('ุฎุทุฃ ูู service worker:', error);
        sendResponse({ success: false, error: error.message });
    }
}

// ุงูุญุตูู ุนูู ุงูุฅุนุฏุงุฏุงุช
async function getSettings() {
    const result = await chrome.storage.local.get(['agentSettings']);
    return result.agentSettings || {
        language: 'ar',
        autoComplete: true,
        notifications: true,
        commandHistory: []
    };
}

// ุญูุธ ุงูุฅุนุฏุงุฏุงุช
async function saveSettings(settings) {
    await chrome.storage.local.set({ agentSettings: settings });
}

// ุชุณุฌูู ุงูุฃูุงูุฑ
async function logCommand(command, result) {
    const timestamp = new Date().toISOString();
    const logEntry = {
        command,
        result,
        timestamp,
        success: result.success || false
    };
    
    const result_data = await chrome.storage.local.get(['commandLogs']);
    let logs = result_data.commandLogs || [];
    
    logs.unshift(logEntry);
    
    // ุงูุงุญุชูุงุธ ุจุขุฎุฑ 100 ุณุฌู ููุท
    if (logs.length > 100) {
        logs = logs.slice(0, 100);
    }
    
    await chrome.storage.local.set({ commandLogs: logs });
}

// ุงูุญุตูู ุนูู ุชุงุฑูุฎ ุงูุฃูุงูุฑ
async function getCommandHistory() {
    const result = await chrome.storage.local.get(['commandHistory']);
    return result.commandHistory || [];
}

// ูุณุญ ุชุงุฑูุฎ ุงูุฃูุงูุฑ
async function clearCommandHistory() {
    await chrome.storage.local.set({ commandHistory: [] });
    await chrome.storage.local.set({ commandLogs: [] });
}

// ุชูููุฐ ุฃูุงูุฑ ุนุงูุฉ (ูุซู ูุชุญ ุชุจููุจุงุช ุฌุฏูุฏุฉ)
async function executeGlobalCommand(command) {
    const trimmedCommand = command.trim().toLowerCase();
    
    if (trimmedCommand.includes('ุงูุชุญ ุชุจููุจ ุฌุฏูุฏ') || trimmedCommand.includes('ุชุจููุจ ุฌุฏูุฏ')) {
        const url = extractUrl(command) || 'chrome://newtab/';
        await chrome.tabs.create({ url });
        return 'ุชู ูุชุญ ุชุจููุจ ุฌุฏูุฏ';
    }
    
    if (trimmedCommand.includes('ุฃุบูู ุงูุชุจููุจ') || trimmedCommand.includes('ุงุบูุงู ุงูุชุจููุจ')) {
        const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
        await chrome.tabs.remove(tab.id);
        return 'ุชู ุฅุบูุงู ุงูุชุจููุจ';
    }
    
    if (trimmedCommand.includes('ุชุญุฏูุซ ุงูุตูุญุฉ') || trimmedCommand.includes('ุงุนุงุฏุฉ ุชุญููู')) {
        const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
        await chrome.tabs.reload(tab.id);
        return 'ุชู ุชุญุฏูุซ ุงูุตูุญุฉ';
    }
    
    throw new Error('ุฃูุฑ ุนุงู ุบูุฑ ูุฏุนูู');
}

// ุงุณุชุฎุฑุงุฌ ุงูุฑุงุจุท ูู ุงููุต
function extractUrl(text) {
    const urlMatch = text.match(/(https?:\/\/[^\s]+)/);
    if (urlMatch) return urlMatch[1];
    
    const domainMatch = text.match(/([a-zA-Z0-9-]+\.[a-zA-Z]{2,})/);
    if (domainMatch) return 'https://' + domainMatch[1];
    
    return null;
}

// ูุฑุงูุจุฉ ุชุญุฏูุซ ุงูุชุจููุจุงุช
chrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {
    if (changeInfo.status === 'complete' && tab.url) {
        // ุชุญุฏูุซ ุขุฎุฑ ูููุน ุชู ุฒูุงุฑุชู
        chrome.storage.local.set({ lastVisitedUrl: tab.url });
    }
});

// ูุฑุงูุจุฉ ุงูููุงูุฐ ุงููุดุทุฉ
chrome.tabs.onActivated.addListener(async (activeInfo) => {
    const tab = await chrome.tabs.get(activeInfo.tabId);
    chrome.storage.local.set({ activeTabUrl: tab.url });
});

// ุงูุชุนุงูู ูุน ุงุฎุชุตุงุฑุงุช ููุญุฉ ุงูููุงุชูุญ
chrome.commands.onCommand.addListener((command) => {
    switch (command) {
        case 'open-agent':
            chrome.action.openPopup();
            break;
            
        case 'quick-search':
            chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {
                chrome.tabs.sendMessage(tabs[0].id, {
                    type: 'FOCUS_SEARCH'
                });
            });
            break;
    }
});

// ุชุญุฏูุซ ุจูุงูุงุช ุงูุงุณุชุฎุฏุงู
chrome.storage.local.get(['usageStats'], (result) => {
    let stats = result.usageStats || {
        commandsExecuted: 0,
        installDate: new Date().toISOString(),
        lastUsed: null
    };
    
    stats.lastUsed = new Date().toISOString();
    chrome.storage.local.set({ usageStats: stats });
});

// ูุนุงูุฌุฉ ุงูุฃุฎุทุงุก ุงูุนุงูุฉ
chrome.runtime.onSuspend.addListener(() => {
    console.log('๐ ูููู ุฎุงูุฏ ูู ูุถุน ุงูุณููู');
});

// ุฑุณุงุฆู ุชุดุฎูุตูุฉ
console.log('๐ค Service Worker ููููู ุฎุงูุฏ ุงูุฐูู ุฌุงูุฒ ููุนูู!');